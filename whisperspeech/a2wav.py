# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/6. Quality-boosting vocoder.ipynb.

# %% auto 0
__all__ = ['Vocoder']

# %% ../nbs/6. Quality-boosting vocoder.ipynb 1
from vocos import Vocos
import torch
import torchaudio

# %% ../nbs/6. Quality-boosting vocoder.ipynb 2
class Vocoder:
    def __init__(self, repo_id="charactr/vocos-encodec-24khz"):
        if torch.cuda.is_available() and (torch.version.cuda or torch.version.hip):
                self.vocos_compute_device = 'cuda'
        else:
            self.vocos_compute_device = 'cpu' # mps does not currently work with vocos, thus only cuda or cpu
        self.vocos = Vocos.from_pretrained(repo_id).to(self.vocos_compute_device)
        self.has_mps = torch.backends.mps.is_available()

    def is_notebook(self):
        try:
            return get_ipython().__class__.__name__ == "ZMQInteractiveShell"
        except:
            return False

    @torch.no_grad()
    def decode(self, atoks):
        if len(atoks.shape) == 3:
            b,q,t = atoks.shape
            # Ensure the atocks tensor remains on the CPU
            if self.has_mps: 
                atoks.to('cpu')
            atoks = atoks.permute(1,0,2)
        else:
            q,t = atoks.shape
        # print(atoks.dtype, atoks.device) # uncomment to check dtype and compute_device
        features = self.vocos.codes_to_features(atoks)
        bandwidth_id = torch.tensor({2: 0, 4: 1, 8: 2}[q]).to(self.vocos_compute_device)  # Move tensor to the same device as model
        if self.has_mps:
            features.to(self.vocos_compute_device)
            # torch.set_default_device('cpu')
            self.vocos.to(self.vocos_compute_device)
        return self.vocos.decode(features, bandwidth_id=bandwidth_id)
        
    def decode_to_file(self, fname, atoks):
        audio = self.decode(atoks)
        torchaudio.save(fname, audio.cpu(), 24000)
        if self.is_notebook():
            from IPython.display import display, HTML, Audio
            display(HTML(f'<a href="{fname}" target="_blank">Listen to {fname}</a>'))
        
    def decode_to_notebook(self, atoks):
        from IPython.display import display, HTML, Audio

        audio = self.decode(atoks)
        display(Audio(audio.cpu().numpy(), rate=24000))
